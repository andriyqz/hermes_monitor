import os
import re
import asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode

from core.hermes import HermesScraper

load_dotenv()
API_TOKEN = os.getenv('API_TOKEN')
PROXY_URL = os.getenv('PROXY_URL')

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

sent_skus = set()
monitor_tasks = {}  # (url, keyword, chat_id): asyncio.Task


@dp.message(Command("start"))
async def handle_start(message: types.Message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n\n"
        "üìå –í–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å:\n"
        "`/add <—Å—Å—ã–ª–∫–∞> <–∫–ª—é—á–µ–≤–æ–µ_—Å–ª–æ–≤–æ>` ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
        "`/remove <—Å—Å—ã–ª–∫–∞> <–∫–ª—é—á–µ–≤–æ–µ_—Å–ª–æ–≤–æ>` ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
        "`/list` ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤\n\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî –ø–∏—à–∏, –ø–æ–º–æ–≥—É!"
    )
    await message.answer(text, parse_mode=ParseMode.MARKDOWN)


@dp.message(Command("add"))
async def handle_add(message: types.Message):
    try:
        url_match = re.search(r'https?://[^\s]+', message.text)
        if not url_match:
            return await message.answer("‚ùå –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

        url = url_match.group(0)
        keyword = message.text.replace('/add', '').replace(url, '').strip()
        if not keyword:
            return await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ —Å—Å—ã–ª–∫–∏.")

        key = (url, keyword, message.chat.id)

        if key in monitor_tasks:
            return await message.answer("‚è≥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")

        task = asyncio.create_task(start_monitoring(url, keyword, message.chat.id))
        monitor_tasks[key] = task

        await message.answer(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ *{keyword}* —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.\n"
            f"–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è.",
            parse_mode=ParseMode.MARKDOWN
        )

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@dp.message(Command("remove"))
async def handle_remove(message: types.Message):
    try:
        url_match = re.search(r'https?://[^\s]+', message.text)
        if not url_match:
            return await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É. –ü—Ä–æ–≤–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")

        url = url_match.group(0)
        keyword = message.text.replace('/remove', '').replace(url, '').strip()
        if not keyword:
            return await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")

        key = (url, keyword, message.chat.id)

        task = monitor_tasks.get(key)
        if task:
            task.cancel()
            del monitor_tasks[key]
            await message.answer(
                f"üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ *{keyword}* –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n"
                f"–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å –µ–≥–æ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π `/add`.",
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await message.answer("‚ùó –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}")


@dp.message(Command("list"))
async def handle_list(message: types.Message):
    user_tasks = [(url, keyword) for (url, keyword, chat_id) in monitor_tasks.keys() if chat_id == message.chat.id]

    if not user_tasks:
        await message.answer("üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤.\n"
                             "–î–æ–±–∞–≤—å –ø–µ—Ä–≤—ã–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `/add`!")
        return

    text_lines = ["üìã *–¢–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏:*"]
    for i, (url, keyword) in enumerate(user_tasks, start=1):
        text_lines.append(
            f"{i}. üîé *{keyword}*\n"
            f"   –°—Å—ã–ª–∫–∞: [–ü–µ—Ä–µ–π—Ç–∏]({url})\n"
            f"   –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: `/remove {url} {keyword}`"
        )

    text = "\n\n".join(text_lines)
    await message.answer(text, parse_mode=ParseMode.MARKDOWN)


async def start_monitoring(url, keyword, chat_id):
    base_url = url.split('/category')[0]
    scraper = HermesScraper(proxy=PROXY_URL)

    try:
        async for item in scraper.monitor_for_item(category_url=url, key=keyword):
            sku = item.get('sku')
            stock = item.get('stock', {})
            in_stock = stock.get('ecom') or stock.get('retail') or stock.get('hasVariantInEcomStock')

            print(item)

            if sku and in_stock and sku not in sent_skus:
                sent_skus.add(sku)
                await send_item_to_user(chat_id=chat_id, item=item, base_url=base_url)
    except asyncio.CancelledError:
        print(f"[–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω] {keyword} - {url}")
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞] {e}")


async def send_item_to_user(chat_id: int, item: dict, base_url: str):
    title = item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    price = item.get('price', 'N/A')
    url_path = item.get('url', '')
    full_url = f"{base_url}{url_path}" if url_path else ''

    text = f"üëú *{title}*\nüí∂ –¶–µ–Ω–∞: {price} EUR\n"
    if full_url:
        text += f"[üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä—É]({full_url})"

    image_url = extract_first_image_url(item)
    if image_url:
        await bot.send_photo(chat_id, photo=image_url, caption=text, parse_mode=ParseMode.MARKDOWN)
    else:
        await bot.send_message(chat_id, text, parse_mode=ParseMode.MARKDOWN)


def extract_first_image_url(item: dict) -> str:
    assets = item.get('assets', [])
    for asset in assets:
        if asset.get('type') == 'image':
            url = asset.get('url')
            if url:
                return f"https:{url}"
    return ''


async def main():
    global sent_skus
    sent_skus = set()
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())